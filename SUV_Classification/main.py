#!/usr/bin/env python3
"""
H·ªÜ TH·ªêNG T·ªêI ·ª¨U NG∆Ø·ª†NG V√Ä PH√ÇN LO·∫†I SUV T·ª∞ ƒê·ªòNG
Ch∆∞∆°ng tr√¨nh t·ªëi ∆∞u ng∆∞·ª°ng s·ª≠ d·ª•ng ground truth t·ª´ file .lab
v√† so s√°nh k·∫øt qu·∫£ ph√¢n lo·∫°i v·ªõi ground truth
Ch·ªâ s·ª≠ d·ª•ng c√°c h√†m t·ª± vi·∫øt v√† built-in functions c·ªßa Python/Numpy
"""

import os
import sys

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from threshold_optimizer import find_training_files, optimize_thresholds_with_ground_truth, save_optimization_results
from evaluator import find_test_files_with_labels, demo_classification_with_ground_truth

def main():
    """
    CH∆Ø∆†NG TR√åNH CH√çNH: T·ªêI ·ª¨U NG∆Ø·ª†NG V√Ä DEMO PH√ÇN LO·∫†I SUV
    1. T·ªëi ∆∞u ng∆∞·ª°ng t·ª± ƒë·ªông s·ª≠ d·ª•ng ground truth t·ª´ file .lab
    2. Demo ph√¢n lo·∫°i tr√™n 4 file test v·ªõi ng∆∞·ª°ng t·ªëi ∆∞u
    3. So s√°nh k·∫øt qu·∫£ v·ªõi ground truth v√† hi·ªÉn th·ªã tr√™n 4 figure
    """
    print("=== H·ªÜ TH·ªêNG T·ªêI ·ª¨U NG∆Ø·ª†NG V√Ä PH√ÇN LO·∫†I SUV ===\n")
    
    # C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n
    base_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(base_dir)
    
    # Th∆∞ m·ª•c d·ªØ li·ªáu
    training_data_dir = os.path.join(project_root, "thigiuaki", "TinHieuHuanLuyen")
    test_data_dir = os.path.join(project_root, "thigiuaki", "TinHieuKiemThu")
    results_dir = os.path.join(project_root, "results")
    
    # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
    os.makedirs(results_dir, exist_ok=True)
    
    # B∆Ø·ªöC 1: T·ªêI ·ª¨U NG∆Ø·ª†NG V·ªöI GROUND TRUTH
    print("=== B∆Ø·ªöC 1: T·ªêI ·ª¨U NG∆Ø·ª†NG T·ª∞ ƒê·ªòNG ===")
    
    training_files = find_training_files(training_data_dir)
    
    if len(training_files) == 0:
        print("Kh√¥ng t√¨m th·∫•y file training v·ªõi ground truth!")
        print("S·ª≠ d·ª•ng ng∆∞·ª°ng m·∫∑c ƒë·ªãnh t·ª´ b√†i b√°o SUVDA...")
        
        best_thresholds = {
            'ste_threshold': -1.5,
            'zcr_threshold': 0.3,
            'st_threshold': 0.7,
            'frame_length': 0.025,
            'frame_shift': 0.010
        }
    else:
        print(f"T√¨m th·∫•y {len(training_files)} file training v·ªõi ground truth:")
        for wav_path, lab_path in training_files:
            print(f"  - {os.path.basename(wav_path)}")
        print()
        
        # Th·ª±c hi·ªán t·ªëi ∆∞u ng∆∞·ª°ng
        best_thresholds = optimize_thresholds_with_ground_truth(training_files)
        
        # L∆∞u k·∫øt qu·∫£ t·ªëi ∆∞u
        save_optimization_results(best_thresholds, results_dir)
    
    # B∆Ø·ªöC 2: DEMO PH√ÇN LO·∫†I V·ªöI NG∆Ø·ª†NG T·ªêI ·ª¨U
    print("\n=== B∆Ø·ªöC 2: DEMO PH√ÇN LO·∫†I V·ªöI NG∆Ø·ª†NG T·ªêI ·ª¨U ===")
    
    test_files = find_test_files_with_labels(test_data_dir)
    
    if len(test_files) == 0:
        print("Kh√¥ng t√¨m th·∫•y file test v·ªõi ground truth!")
        return
    
    print(f"T√¨m th·∫•y {len(test_files)} file test v·ªõi ground truth:")
    for wav_path, lab_path in test_files:
        print(f"  - {os.path.basename(wav_path)}")
    print()
    
    # Demo ph√¢n lo·∫°i v·ªõi ng∆∞·ª°ng t·ªëi ∆∞u v√† so s√°nh v·ªõi ground truth
    demo_classification_with_ground_truth(test_files, best_thresholds, results_dir)
    
    print("\nüéØ HO√ÄN TH√ÄNH!")
    print("üìÑ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c results/")
    print("üìä C√°c figure hi·ªÉn th·ªã so s√°nh v·ªõi ground truth")


if __name__ == "__main__":
    main()
